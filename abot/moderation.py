from datetime import datetime
import discord
from discord.ext import commands
from discord.commands import Option
from discord.ui import Button, View
from config import owner_id
import psycopg2
import random
import datetime

db = psycopg2.connect(dbname="bot", user="postgres",
                            password="pgdb270708wW@", host="45.90.217.187" )
sql = db.cursor()

code = random.randint(0, 999999999)

class Moderation(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="shutdown", description="–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞.")
    async def shutdown(self, ctx, –∫–æ–¥: Option(str, '–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞.', required=False, default=None)):
        emb = discord.Embed(title="–í—ã–∫–ª—é—á–µ–Ω–∏–µ", colour=discord.Color.red())
        member = self.bot.get_user(owner_id)
        if str(–∫–æ–¥) == str(code):
            await ctx.respond(embed=emb)
            raise SystemExit(1)
        elif –∫–æ–¥ == None:
            await member.send("/shutdown " + str(code))
            emb.add_field(name='–û—à–∏–±–∫–∞', value='–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –í—ã—Å—ã–ª–∞—é –∫–æ–¥.')
        elif –∫–æ–¥ := str(code):
            emb.add_field(name='–û—à–∏–±–∫–∞', value='–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥.')
        await ctx.respond(embed=emb)

    @commands.slash_command(name='clear', description='–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç.')
    @commands.has_permissions(administrator=True)
    async def clear(self, ctx, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: Option(int, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.', required=False, default=100)):
        if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= 1000000000000:
            await ctx.respond('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100000000000')
        else:
            messages = await ctx.history(limit=1000000000000).flatten()
            await ctx.channel.purge(limit=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            if len(messages) >= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
                if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= 5:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —Å–æ–æ–±—â–µ–Ω–∏–π!')
                if –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= 2 and –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <= 4:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ} —Å–æ–æ–±—â–µ–Ω–∏—è!')
                elif –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ == 1:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ!')

            if len(messages) <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
                if len(messages) >= 5:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π!')
                if len(messages) >= 2 and len(messages) <= 4:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è!')
                elif len(messages) == 1:
                    await ctx.respond(f'–£–¥–∞–ª–µ–Ω–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ!')

    @commands.slash_command(name='admin', description='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
    async def admin(self, ctx, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: Option(discord.Member, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', required=True), –º–∏–Ω—É—Ç: Option(int, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –º—É—Ç–∞.', required=False), —Å–µ–∫—É–Ω–¥: Option(int, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º—É—Ç–∞.', required=False), —á–∞—Å–æ–≤: Option(int, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –º—É—Ç–∞.', required=False), –¥–Ω–µ–π: Option(int, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º—É—Ç–∞.', required=False)):
        sql.execute("""SELECT moder_id FROM "settings" WHERE server_id = %s;""", [ctx.guild.id])
        moderid = sql.fetchone()
        moder_id = " ".join(str(x) for x in moderid)
        moder_role = ctx.guild.get_role(int(moder_id))
        if moder_role in ctx.author.roles:
            if –º–∏–Ω—É—Ç is None:
                –º–∏–Ω—É—Ç = 0
            if —Å–µ–∫—É–Ω–¥ is None:
                —Å–µ–∫—É–Ω–¥ = 0
            if —á–∞—Å–æ–≤ is None:
                —á–∞—Å–æ–≤ = 0
            if –¥–Ω–µ–π is None:
                –¥–Ω–µ–π = 0
            emb = discord.Embed(title='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', colour=discord.Color.green())
            emb.add_field(name='–î–µ–π—Å—Ç–≤–∏—è', value=f'–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.display_name}?')
            kickB = Button(label='–ö–∏–∫–Ω—É—Ç—å', style=discord.ButtonStyle.danger,row=1)
            async def kick_callback(interaction):
                if interaction.user == ctx.author:
                    await interaction.response.edit_message(content="–ö–∏–∫–Ω—É—Ç(–∞)!", view=None, embed=None)
                    await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.kick(reason=f'ABot, —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –æ—Ç {ctx.author.display_name}')
                else:
                    await ctx.respond('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!', ephemeral=True)
            kickB.callback = kick_callback
            if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.timed_out == True:
                muteB = Button(label='–†–∞–∑–º—å—é—Ç–∏—Ç—å', style=discord.ButtonStyle.success,row=1)
            else:
                muteB = Button(label='–ó–∞–º—å—é—Ç–∏—Ç—å', style=discord.ButtonStyle.danger,row=1)
            async def mute_callback(interaction):
                if interaction.user == ctx.author:
                    if –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.timed_out == True:
                        await interaction.response.edit_message(content="–†–∞–∑–º—å—é—á–µ–Ω(–∞)!", view=None, embed=None)
                        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.timeout_for(reason=f'ABot, —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –æ—Ç {ctx.author.display_name}', duration=datetime.timedelta(days = 0, hours = 0, minutes = 0, seconds = 0))
                    else:
                        await interaction.response.edit_message(content="–ó–∞–º—å—é—á–µ–Ω(–∞)!", view=None, embed=None)
                        await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.timeout_for(reason=f'ABot, —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –æ—Ç {ctx.author.display_name}', duration=datetime.timedelta(days = –¥–Ω–µ–π, hours = —á–∞—Å–æ–≤, minutes = –º–∏–Ω—É—Ç, seconds = —Å–µ–∫—É–Ω–¥))
                else:
                    await ctx.respond('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!', ephemeral=True)
            muteB.callback = mute_callback
            banB = Button(label='–ó–∞–±–∞–Ω–∏—Ç—å', style=discord.ButtonStyle.danger,row=1)
            async def ban_callback(interaction):
                if interaction.user == ctx.author:
                    await interaction.response.edit_message(content="–ó–∞–±–∞–Ω–µ–Ω(–∞)!", view=None, embed=None)
                    await –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.ban(reason=f'ABot, —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –æ—Ç {ctx.author.display_name}')
                else:
                    await ctx.respond('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!', ephemeral=True)
            banB.callback = ban_callback
            view = View()
            view.add_item(kickB)
            view.add_item(muteB)
            view.add_item(banB)
            await ctx.respond(embed=emb,view=view, ephemeral=True)
        else:
            await ctx.respond('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!', ephemeral=True)

    async def addorremove(ctx: discord.AutocompleteContext):
        vibor=["—É–±—Ä–∞—Ç—å", "–ø–æ—Å—Ç–∞–≤–∏—Ç—å"]
        return [
            –≤—ã–±–æ—Ä for –≤—ã–±–æ—Ä in vibor
        ]

    @commands.slash_command(name='—ë–ª–∫–∞', description='–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —ë–ª–∫–∏ —Å –Ω–∏–∫–∞')
    @commands.has_permissions(administrator=True)
    async def elka(self, ctx, –≤—ã–±–æ—Ä: Option(str,"–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å, –≤–æ—Ç –≤ —á—ë–º –≤–æ–ø—Ä–æ—Å...",autocomplete=discord.utils.basic_autocomplete(addorremove))):
        owner = self.bot.get_user(int(ctx.guild.owner.id))
        server_members = ctx.guild.members
        owindex = server_members.index(owner)
        server_members.pop(owindex)
        if –≤—ã–±–æ—Ä == "—É–±—Ä–∞—Ç—å":
            await ctx.respond('–ù–∞—á–∏–Ω–∞—é...')
            for i in server_members:
                if i.bot is True:
                    pass
                else:
                    name = i.display_name
                    new_name = name.replace("üéÑ", "")
                    await i.edit(nick=new_name)
        elif –≤—ã–±–æ—Ä == "–ø–æ—Å—Ç–∞–≤–∏—Ç—å":
            await ctx.respond('–ù–∞—á–∏–Ω–∞—é...')
            for i in server_members:
                if i.bot is True:
                    pass
                else:
                    name = i.display_name
                    new_name = "üéÑ"+ name + "üéÑ"
                    await i.edit(nick=new_name)
        else:
            await ctx.respond('–í—ã–±–µ—Ä–∏—Ç–µ: —É–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å.')

    @commands.slash_command(name="unban", description="–†–∞–∑–±–∞–Ω")
    async def unban(self, ctx, id: Option(str, "Id –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.", required=True)):
        sql.execute("""SELECT moder_id FROM "settings" WHERE server_id = %s;""", [ctx.guild.id])
        moderid = sql.fetchone()
        moder_id = " ".join(str(x) for x in moderid)
        moder_role = ctx.guild.get_role(int(moder_id))
        if moder_role in ctx.author.roles:
            ban_list = await ctx.guild.bans()
            for i in ban_list:
                if i.user.id == int(id):
                    await ctx.guild.unban(i.user)
                    await ctx.respond(content=f"{i.user.name} —Ä–∞–∑–±–∞–Ω–µ–Ω!", ephemeral=True)
        else:
            ctx.respond(content="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", ephemeral=True)
        
        
def setup(bot):
    bot.add_cog(Moderation(bot))

